{
	"info": {
		"_postman_id": "f54be20e-dd20-4981-bfbc-7dbaacb7c445",
		"name": "Homework_2_33_group",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_2_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string."
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{http}}/first",
					"host": [
						"{{http}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками).\r",
							"\r",
							"pm.test(\"Response name\", function () {\r",
							"    pm.expect(json.name).to.eql(\"Sanya\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками).\r",
							"\r",
							"pm.test(\"Response age\", function () {\r",
							"    pm.expect(json.age).to.eql('31');\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками).\r",
							"\r",
							"pm.test(\"Response salary\", function () {\r",
							"    pm.expect(json.salary).to.eql(1800);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"var requ = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request).\r",
							"\r",
							"pm.test(\"Request name\", function () {\r",
							"    pm.expect(requ.name).to.eql(json.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request).\r",
							"\r",
							"pm.test(\"Request age\", function () {\r",
							"    pm.expect(requ.age).to.eql(json.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Request salary\", function () {\r",
							"    pm.expect(+requ.salary).to.eql(json.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"var re_family = json.family\r",
							"console.log(re_family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request).\r",
							"\r",
							"pm.test(\"Test u_salary_1_5_year\", function () {\r",
							"    pm.expect(+requ.salary*4).to.eql(json.family.u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Sanya",
							"type": "default"
						},
						{
							"key": "age",
							"value": "31",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1800",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{http}}/user_info_3",
					"host": [
						"{{http}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"var requ = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request).\r",
							"\r",
							"pm.test(\"Request name\", function () {\r",
							"    pm.expect(requ.name).to.eql(json.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request).\r",
							"\r",
							"pm.test(\"Request age\", function () {\r",
							"    pm.expect(requ.age).to.eql(json.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.).\r",
							"\r",
							"pm.test(\"Request salary\", function () {\r",
							"    pm.expect(+requ.salary).to.eql(json.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"var re_family = json.family\r",
							"console.log(re_family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Test dog name\", function () {\r",
							"    pm.expect(json.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Test dog age\", function () {\r",
							"    pm.expect(json.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Test dog name Luky\", function () {\r",
							"    pm.expect(json.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Test dog age 4\", function () {\r",
							"    pm.expect(json.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{http}}/object_info_3?name=Sanya&age=31&salary=1800",
					"host": [
						"{{http}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sanya"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"var requ = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request).\r",
							"\r",
							"pm.test(\"Request name\", function () {\r",
							"    pm.expect(requ.name).to.eql(json.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request).\r",
							"\r",
							"pm.test(\"Request age\", function () {\r",
							"    pm.expect(+requ.age).to.eql(json.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(\"Request salary\", requ.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(\"Respone salary\", json.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(\"Salary 0 element\", json.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(\"Salary 1 element\", json.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(\"Salary 2 element\", json.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Salary 0\", function () {\r",
							"    pm.expect(+requ.salary).to.eql(json.salary[0]);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Salary 1\", function () {\r",
							"    pm.expect(+requ.salary*2).to.eql(+json.salary[1]);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Salary 2\", function () {\r",
							"    pm.expect(+requ.salary*3).to.eql(+json.salary[2]);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name.\r",
							"\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"// 16. Создать в окружении переменную age.\r",
							"\r",
							"pm.environment.set(\"age\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary.\r",
							"\r",
							"pm.environment.set(\"salary\");\r",
							"\r",
							"// 18. Передать в окружение переменную name.\r",
							"\r",
							"pm.environment.set(\"name\", requ.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age.\r",
							"\r",
							"pm.environment.set(\"age\", requ.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary.\r",
							"\r",
							"pm.environment.set(\"salary\", requ.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (i of json.salary) {\r",
							"    console.log(i)\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{http}}/object_info_4?name=Sanya&age=31&salary=1800",
					"host": [
						"{{http}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sanya"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request.\r",
							"// 2. Вставить параметр age из окружения в age.\r",
							"// 3. Вставить параметр name из окружения в name.\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"var json = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"var requ = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary.\r",
							"\r",
							"pm.test(\"Test start_qa_salary\", function () {\r",
							"    pm.expect(json).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months.\r",
							"\r",
							"pm.test(\"Test qa_salary_after_6_months\", function () {\r",
							"    pm.expect(json).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months.\r",
							"\r",
							"pm.test(\"Test qa_salary_after_12_months\", function () {\r",
							"    pm.expect(json).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year.\r",
							"\r",
							"pm.test(\"Test qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(json).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years.\r",
							"\r",
							"pm.test(\"Test qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(json).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person.\r",
							"\r",
							"pm.test(\"Test person\", function () {\r",
							"    pm.expect(json).to.have.property('person');\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Test salary\", function () {\r",
							"    pm.expect(+requ.salary).to.eql(json.start_qa_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Test salary*2\", function () {\r",
							"    pm.expect(+requ.salary*2).to.eql(json.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Test salary*2.7\", function () {\r",
							"    pm.expect(+requ.salary*2.7).to.eql(json.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Test salary*3.3\", function () {\r",
							"    pm.expect(+requ.salary*3.3).to.eql(json[\"qa_salary_after_1.5_year\"]);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Test salary*3.8\", function () {\r",
							"    pm.expect(+requ.salary*3.8).to.eql(json[\"qa_salary_after_3.5_years\"]);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Test u_name\", function () {\r",
							"    pm.expect(requ.name).to.eql(json.person.u_name[0]);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request).\r",
							"\r",
							"pm.test(\"Test u_age\", function () {\r",
							"    pm.expect(+requ.age).to.eql(json.person.u_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request).\r",
							"\r",
							"pm.test(\"Test salary*4.2\", function () {\r",
							"    pm.expect(+requ.salary*4.2).to.eql(json.person.u_salary_5_years);\r",
							"});\r",
							"\r",
							"// 22. *** Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (var pers in json.person) {\r",
							"    console.log(pers,\"=\",json.person[pers])\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{http}}/user_info_2",
					"host": [
						"{{http}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
